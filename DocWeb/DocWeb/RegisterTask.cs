// <auto-generated Note="Disable CodeMaid sorting." />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TaskScheduler;

namespace DocWeb
{
    /* 引用taskschd.dll，关闭嵌入互操作类型
     */
    static class RegisterTask
    {
        private static TaskSchedulerClass scheduler;

        private static ITaskFolder folder;

        private static IRegisteredTask regTask;

        private const string taskName = @"MkDocs_E85BD843-5026-4DD1-AB35-69DBE4B2521C";

        private const string triggerName = "trigger1";       // ITrigger.Id和IAction.Id不能重复
        
        private const string actionName = "action1";         // ITrigger.Id和IAction.Id不能重复

        static RegisterTask()
        {
            scheduler = new TaskSchedulerClass();
            scheduler.Connect(null, null, null, null);
            folder = scheduler.GetFolder("\\");
        }

        public static bool FindTaskScheduler(out TaskSchedulerParam tsp)
        {
            regTask = null;
            tsp = null;
            // https://learn.microsoft.com/en-us/windows/win32/api/taskschd/ne-taskschd-task_enum_flags
            IRegisteredTaskCollection tasks = folder.GetTasks(1);      // 1 包括隐藏任务
            // 从1开始，后面取等
            for (int i = 1; i <= tasks.Count; ++i)
            {
                if (tasks[i].Name == taskName)
                {
                    regTask = tasks[i];
                    break;
                }
            }

            if (regTask != null)
            {
                tsp = new TaskSchedulerParam();
                tsp.Description = regTask.Definition.RegistrationInfo.Description;

                ITimeTrigger trigger = null;
                // 从1开始，后面取等
                for (int i = 1; i <= regTask.Definition.Triggers.Count; ++i)
                {
                    if (regTask.Definition.Triggers[i].Id == triggerName)
                    {
                        trigger = regTask.Definition.Triggers[i] as ITimeTrigger;
                        break;
                    }
                }
                if (trigger != null)
                {
                    tsp.StartTime = trigger.StartBoundary;
                    tsp.Interval = trigger.Repetition.Interval;
                    tsp.Enable = trigger.Enabled;
                }

                IExecAction action = null;
                // 从1开始，后面取等
                for (int i = 1; i <= regTask.Definition.Actions.Count; ++i)
                {
                    if (regTask.Definition.Actions[i].Id == actionName)
                    {
                        action = regTask.Definition.Actions[i] as IExecAction;
                        break;
                    }
                }
                if (action != null)
                {
                    tsp.ExePath = action.Path;
                    tsp.ExeArgs = action.Arguments;
                }

                return true;
            }
            return false;
        }



        public static void AddOrUpdateTaskScheduler(TaskSchedulerParam para)
        {
            if (para != null)
            {
                ITaskDefinition task = null;
                DeleteTaskScheduler();
                if (regTask == null)
                {
                    task = scheduler.NewTask(0);
                    SetTaskScheduler(para, task);
                    // 注册
                    // https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-tsch/6daca1c9-6766-46f4-9378-5f5a9260c967
                    regTask = folder.RegisterTaskDefinition(taskName, task, (int) _TASK_CREATION.TASK_CREATE, null, null, _TASK_LOGON_TYPE.TASK_LOGON_INTERACTIVE_TOKEN);
                }
                // 下面报错Id:trigger1 疑似ID不能重复用
                //else
                //{
                //    task = regTask.Definition;
                //    SetTaskScheduler(para, task);
                //    folder.RegisterTaskDefinition(taskName, task, (int) _TASK_CREATION.TASK_CREATE_OR_UPDATE, null, null, _TASK_LOGON_TYPE.TASK_LOGON_INTERACTIVE_TOKEN);
                //}
            }
        }


        public static void DeleteTaskScheduler()
        {
            if (regTask != null)
            {
                folder.DeleteTask(taskName, 0);
                regTask = null;
            }
        }


        private static void SetTaskScheduler(TaskSchedulerParam para, ITaskDefinition task)
        {
            if (para != null && task != null)
            {
                // 常规
                task.RegistrationInfo.Description = para.Description;
                // 触发器
                ITimeTrigger trigger = task.Triggers.Create(_TASK_TRIGGER_TYPE2.TASK_TRIGGER_TIME) as ITimeTrigger;
                trigger.Id = triggerName;
                trigger.Enabled = para.Enable;
                trigger.Repetition.Interval = para.Interval;
                trigger.StartBoundary = para.StartTime;
                // 操作
                IExecAction action = task.Actions.Create(_TASK_ACTION_TYPE.TASK_ACTION_EXEC) as IExecAction;
                action.Id = actionName;
                action.Path = para.ExePath;
                action.Arguments = para.ExeArgs;
            }
        }
    }
}
